#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>

void sort(int arr[], int n, int (*sort_func)(int[], int)) {
    sort_func(arr, n);
    printf("Elements Sorted: ");
    for(int i=0; i<n; i++) {
        printf("%d,", arr[i]);
    }
    printf("\n");
}

void bubblesort(int arr[], int n) {
    int i, j, temp;
    for(i=0; i<n; i++) {
        for(j=0; j<n-1; j++) {
            if(arr[j]>arr[j+1]) {
                temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}

void insertionsort(int arr[], int n) {
    int i, j, temp;
    for (i = 1; i < n; i++) {
        temp = arr[i];
        j = i - 1;
        while(j>=0 && temp <= arr[j]) {
            arr[j+1] = arr[j];
            j = j-1;
        }
        arr[j+1] = temp;
    }
}

void fork1() {
    int arr[25], n, i, status;
    printf("\nEnter the no of values in array :");
    scanf("%d",&n);
    printf("\nEnter the array elements :");
    for(i=0; i<n; i++) {
        scanf("%d",&arr[i]);
    }
    int pid=fork();
    if(pid==0) {
        sleep(10);
        printf("\nchild process\n");
        printf("child process id=%d\n", getpid());
        sort(arr, n, insertionsort);
        printf("parent process id=%d\n", getppid());
        system("ps -x");
    } else {
        printf("\nparent process\n");
        printf("parent process id=%d\n", getpid());
        sort(arr, n, bubblesort);
    }
}

int main() {
    fork1();
    return 0;
}
